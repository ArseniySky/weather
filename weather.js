// Generated by CoffeeScript 1.10.0
(function() {
  var URL, Weather, beginningOfDay, endOfDay, http, isModule, maxBy, minBy;

  isModule = typeof module !== "undefined" && module.exports;

  if (isModule) {
    http = require("http");
    URL = require('url');
  }

  maxBy = function(list, iterator) {
    var f, max;
    max = null;
    f = function(memo, d) {
      var val;
      val = iterator(d);
      if (memo === null || val > max) {
        max = val;
        memo = d;
      }
      return memo;
    };
    return list.reduce(f, null);
  };

  minBy = function(list, iterator) {
    var f, min;
    min = null;
    f = function(memo, d) {
      var val;
      val = iterator(d);
      if (memo === null || val < min) {
        min = val;
        memo = d;
      }
      return memo;
    };
    return list.reduce(f, null);
  };

  beginningOfDay = function(date) {
    if (typeof date === 'number') {
      date = new Date(date);
    }
    date.setHours(0);
    date.setMinutes(0);
    date.setSeconds(0);
    date.setMilliseconds(0);
    return date;
  };

  endOfDay = function(date) {
    if (typeof date === 'number') {
      date = new Date(date);
    }
    date.setHours(11);
    date.setMinutes(59);
    date.setSeconds(59);
    date.setMilliseconds(999);
    return date;
  };

  Weather = (function() {
    function Weather() {}

    Weather.VERSION = "0.0.2";

    Weather.kelvinToFahrenheit = function(value) {
      return (this.kelvinToCelsius(value) * 1.8) + 32;
    };

    Weather.kelvinToCelsius = function(value) {
      return value - 273.15;
    };

    Weather.getCurrent = function(city, callback) {
      return this._getJSON("http://openweathermap.org/data/2.1/find/city?q=" + (encodeURIComponent(city)) + "&cnt=1", (function(_this) {
        return function(data) {
          return callback(new Weather.Current(data));
        };
      })(this));
    };

    Weather.getForecast = function(city, callback) {
      return this._getJSON("http://openweathermap.org/data/2.1/forecast/city?q=" + (encodeURIComponent(city)) + "&cnt=1", (function(_this) {
        return function(data) {
          return callback(new Weather.Forecast(data));
        };
      })(this));
    };

    /*
    Weather._getJSON = function(url, callback) {
      if (isModule) {
        return http.get(URL.parse(url), function(response) {
          return callback(response.body);
        });
      } else {
        return $.ajax({
          url: url,
          dataType: "jsonp",
          success: callback
        });
      }
    };
    */

    Weather._getJSON = function( url, callback ) {
        if (isModule) {
            return http.get(URL.parse(url), function(response) {
                return callback(response.body);
            });
        } else {
            // Create a new HTTP request to the url provided
            var request = new XMLHttpRequest();

            // The 3rd parameter must be set to true in order to create an asynchronous request.
            request.open( "GET", url, true );

            request.onreadystatechange = function() {
                if ( request.readyState === 4 ) { // 4 is done
                    // Success!
                    callback( JSON.parse( request.responseText ) );
                } else {
                    // We reached our target server, but it returned an error
                    throw new Error( request.status + " " + request.statusText );
                }
            };

            request.send();
        }
    };

    return Weather;

  })();

  Weather.Forecast = (function() {
    function Forecast(data) {
      this.data = data;
    }

    Forecast.prototype.startAt = function() {
      return new Date(minBy(this.data.list, function(d) {
        return d.dt;
      }).dt * 1000);
    };

    Forecast.prototype.endAt = function() {
      return new Date(maxBy(this.data.list, function(d) {
        return d.dt;
      }).dt * 1000);
    };

    Forecast.prototype.day = function(date) {
      return new Weather.Forecast(this._filter(date));
    };

    Forecast.prototype.low = function() {
      var output;
      if (!(this.data.list.length > 0)) {
        return void 0;
      }
      output = minBy(this.data.list, function(item) {
        return item.main.temp_min;
      });
      return output.main.temp_min;
    };

    Forecast.prototype.high = function() {
      var output;
      if (!(this.data.list.length > 0)) {
        return void 0;
      }
      output = maxBy(this.data.list, function(item) {
        return item.main.temp_max;
      });
      return output.main.temp_max;
    };

    Forecast.prototype._filter = function(date) {
      var _beginningOfDay, _endOfDay;
      if (date instanceof Date) {
        date = date.getTime();
      }
      _beginningOfDay = beginningOfDay(date);
      _endOfDay = endOfDay(date);
      return {
        list: this.data.list.filter(function(range) {
          var dateTimestamp;
          dateTimestamp = range.dt * 1000;
          if (dateTimestamp >= _beginningOfDay.getTime() && dateTimestamp <= _endOfDay.getTime()) {
            return range;
          }
        })
      };
    };

    return Forecast;

  })();

  Weather.Current = (function() {
    function Current(data) {
      this.data = data;
    }

    Current.prototype.temperature = function() {
      var temperature;
      return temperature = this.data.list[0].main.temp;
    };

    Current.prototype.conditions = function() {
      return this.data.list[0].weather[0].description;
    };

    return Current;

  })();

  if (isModule) {
    module.exports = Weather;
  } else {
    window.Weather = Weather;
  }

}).call(this);
